nameOverride: alloy
namespaceOverride: loki

configReloader:
  enabled: true

controller:
  type: 'daemonset'
  replicas: 1
  tolerations:
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule
  volumes:
    extra:
    - hostPath:
        path: /var/lib/docker/containers
      name: containers
    - hostPath:
        path: /var/log/pods
      name: pods
    - hostPath:
        path: /var/log/journal
      name: journal

alloy:
  mounts:
    extra:
    - mountPath: /var/lib/docker/containers
      name: containers
      readOnly: true
    - mountPath: /var/log/pods
      name: pods
      readOnly: true
    - mountPath: /var/log/journal
      name: journal
      readOnly: true
  configMap:
    content: |
      logging {
        level  = "info"
        format = "logfmt"
      }

      loki.write "loki" {
          endpoint {
              url = "http://loki-gateway.loki.svc.cluster.local/loki/api/v1/push"
          }
      }

      loki.source.journal "journal" {
          max_age       = "12h0m0s"
          path          = "/var/log/journal"
          relabel_rules = discovery.relabel.journal.rules
          forward_to    = [loki.write.loki.receiver]
          labels        = {
            job = "systemd-journal",
          }
      }

      discovery.relabel "journal" {
        targets = []

        rule {
            source_labels = ["__journal__systemd_unit"]
            target_label  = "unit"
        }

        rule {
            source_labels = ["__journal__hostname"]
            target_label  = "hostname"
        }
      }

      discovery.kubernetes "kubernetes_pods" {
              role = "pod"
      }

      loki.source.kubernetes "kubernetes_pods" {
          targets    = discovery.relabel.kubernetes_pods.output
          forward_to = [loki.write.loki.receiver]
      }

      discovery.relabel "kubernetes_pods" {
              targets = discovery.kubernetes.kubernetes_pods.targets

              rule {
                      source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name", "__meta_kubernetes_pod_label_app", "__tmp_controller_name", "__meta_kubernetes_pod_name"]
                      regex         = "^;*([^;]+)(;.*)?$"
                      target_label  = "app"
              }

              rule {
                      source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance", "__meta_kubernetes_pod_label_instance"]
                      regex         = "^;*([^;]+)(;.*)?$"
                      target_label  = "instance"
              }

              rule {
                      source_labels = ["__meta_kubernetes_pod_node_name"]
                      target_label  = "node_name"
              }

              rule {
                      source_labels = ["__meta_kubernetes_namespace"]
                      target_label  = "namespace"
              }

              rule {
                      source_labels = ["__meta_kubernetes_pod_name"]
                      target_label  = "pod"
              }

              rule {
                      source_labels = ["__meta_kubernetes_pod_container_name"]
                      target_label  = "container"
              }

              rule {
                      source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
                      separator     = "/"
                      target_label  = "__path__"
                      replacement   = "/var/log/pods/*$1/*.log"
              }

              rule {
                      source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_component", "__meta_kubernetes_pod_label_component"]
                      regex         = "^;*([^;]+)(;.*)?$"
                      target_label  = "component"
              }

      }

      local.file_match "kubernetes_pods" {
              path_targets = discovery.relabel.kubernetes_pods.output
      }
